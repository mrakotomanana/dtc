font family de basé @lai ordi local

atao recherche 
unité relative...
aona ni fampiasana ni font face
inon no atao oe vertical-align si i fampiasana azi
inon ni atao oe pad - padding

font face -> telecharger-na lai font @internet de ampiasaina ao @page-nao
ohatra ao @google font

rehefa manao style de font caractère 1/1 fa text ra lai fitambarani
text-align zan par rapport @parent misi width

text-shadow unité/px unité/px unité/px color
exemple text-shadow 12px 2px 3px #000000

12px axe x
2px axe y
3px blur
#000 color

long hand
    border-width: 10px;
    border-style: groove;
    border-color: #0d0d0d;

short hand
        border: 1px solid #0d0d0d;

afa preciser-na tsara ni border
top
left
right
bottom

Ex : 
border-top: 1px solid #0d0d0d;
border-bottom: 1px groove #0d0d0d;

arrondissement anlai angle : radius
top-left
top-right
bottom-left
bottom-right

mila atao carré tsar ra te ahazo rond @lai sari

rehefa manao positionnement absolue
par rapport @ecran ni top left right bottom
afka kitihina ni top left right bottom

misi marge par defaut mila alana

rehefa manao positionnement relative dia ni navigateur no mposition anlai element
tsi afk kitihina ni top left right bottom
fa ni marge no afka lalaovina


padding  marge intérieur
marging marge extérieur

atao positionnement sticky iz ra tina tazomina ts ihetsika 
asian postion top/bottom

rehefa anao alignment dia manao display

misi ni display flex (flex-box)
misi ni display none (ts visible)
misi ni display block (visible)
misi ni display content (visible fa ao ambadik'lai contenu)

justify-content : ajustement contenu element tsirairai
align-items : alignment text 

devoir
manao recherche momba an'ni grid
deploiement netlify si github pages ni page cv
atao mitovi @username github ex mrakotomanan.netlify.app
+ font-face
+ flex
+ color / border

ao anati nav tsi tokoni hisi div intsoni
div ni element ngeza ndrindra
mila mitadi ni ordre elements

Trois types de contextes de positionnement
Il existe pour le moment trois règles de positionnement introduites avec la propriété position CSS:

absolute : par défaut, l'élément servant contexte de positionnement est la zone de contenu visible de la fenêtre du navigateur (body). La position est donc variable pour bottom et right si par exemple vous réduisez la taille de la fenêtre ou au chargement suivant la taille de la fenêtre.
L'élément repositionné sort du flux normal.

fixed : l'élément servant de contexte de positionnement est la zone de contenu visible de la fenêtre du navigateur (body). La position est donc variable pour bottom et right si par exemple vous réduisez la taille de la fenêtre ou au chargement suivant la taille de la fenêtre.
Contrairement absolute l'élément reste visuellement au même endroit quand on utilise les scrollbarre.
L'élément repositionné sort du flux normal.
Cas particulier : si le contexte de positionnement est créé par la propriété Css transform, alors fixed se comporte comme absolute.

relative : l'élément servant de contexte de positionnement est lui-même.
L'élément repositionné reste dans le flux normal, c'est-à-dire que l'espace utilisé de l'élément avant repositionnement est présent.

Après avoir appliqué la propriété CSS position: relative à un élément, cet élément continue de suivre le flux normal du document, sauf s'il est déplacé explicitement à l'aide des propriétés top, right, bottom ou left. Voici comment un élément se comporte dans le flux normal après avoir été positionné de manière relative :

Flux normal du document : L'élément avec position: relative reste dans le flux normal du document, ce qui signifie qu'il occupe l'espace prévu pour lui dans le flux. Les autres éléments suivent et s'alignent avec l'élément comme s'il n'était pas positionné de manière relative.

Déplacement optionnel : Vous pouvez déplacer l'élément par rapport à sa position normale en utilisant les propriétés top, right, bottom et left. Ces propriétés spécifient la distance de déplacement par rapport à la position normale de l'élément. Par exemple, top: 20px déplacera l'élément de 20 pixels vers le bas par rapport à sa position normale.

Interactions avec d'autres éléments : Les éléments autour de l'élément positionné de manière relative ne sont pas affectés par sa position relative, sauf en ce qui concerne le décalage visuel causé par les propriétés top, right, bottom et left. Les marges, les rembourrages et les bordures des autres éléments sont traités comme s'il n'y avait pas de position relative.

Positionnement empilé : Si vous avez plusieurs éléments positionnés de manière relative les uns après les autres dans le flux normal du document, ils seront empilés les uns sur les autres dans l'ordre où ils apparaissent dans le code HTML, à moins que leurs déplacements ne les chevauchent.

Taille et dimensions : La position relative n'affecte généralement pas la taille ou les dimensions de l'élément, à moins que vous ne spécifiiez explicitement une largeur ou une hauteur différente.

En résumé, un élément avec position: relative reste dans le flux normal du document et peut être déplacé par rapport à sa position normale en utilisant les propriétés de déplacement. Il n'affecte pas la mise en page globale des autres éléments, mais peut avoir un impact visuel en déplaçant l'élément par rapport à sa position initiale.

La propriété position Css prend le dessus sur les flottants, donc la propriété CSS float est mise à none.
s

La propriété de feuille de style position CSS peut prendre la valeur de position :

static : n'est pas considéré comme un élément positionné, left, top, right et bottom sont ignorés. Valeur par défaut.
relative : l'élément est considéré comme positionné, le positionnement se fera par rapport à l'endroit où il est positionné dans le flux (où l'élément a été déclaré dans le code HTML), sauf pour certain éléments de tableau.
absolute : l'élément est considéré comme positionné, le positionnement se fera par rapport au coin haut gauche de la page HTML ou par rapport au premier parent trouvé qui n'est pas static. Son comportement est de type block et sort du flux.
fixed : l'élément est considéré comme positionné, reste fixe, ne bouge pas quand défile l'écran, le point d'origine est coin haut gauche de la zone de contenu de la fenêtre. Son comportement est de type block et sort du flux.
sticky (CSS3) : c'est un mixte entre la position relative et fixe. L'élément est considéré en position relative jusqu'à ce que le défilement de la fenêtre soit telle que l'élément serait à moins de la valeur du seuil (top, left, right, bottom). Au-delà de ce seuil, l'élément serait fixé à la valeur du seuil qui est obligatoire. Son positionnement se fera par rapport au coin haut gauche de la page HTML ou par rapport au premier parent trouvé qui n'est pas static et à l'intérieur de cet élément.

La propriété CSS position est applicable sur toutes les balises HTML ou XHTML.

Les balises filles HTML ou XHTML n'héritent pas de la propriété position CSS.

La propriété position CSS ne pose aucun problème d'interprétation, sauf pour "fixed" sous Internet Explorer qui n'est reconnue qu'à partir de la version 7+ et sauf pour "sticky" sur les balises HTML table et ses enfants (th, td, ...)

Si la propriété CSS display est à none, alors la propriété position CSS est ignorée.

Si la propriété de feuille de style position CSS a une valeur de absolute ou fixed alors, la valeur de display se transforme en block pour :

inline,
inline-block,
table-[*].

ou en table pour :
inline-table.

La propriété position Css prend le dessus sur les flottants, donc la propriété CSS float est mise à none.

La valeur relative et les éléments de tableau
L'effet de position à relative sur les éléments de type table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-column, table-cell (voir bug), et table-caption est indéfini à ce jour (10-2016).


En CSS, les unités relatives sont des unités de mesure qui dépendent de certaines caractéristiques de l'élément parent ou de la mise en page, plutôt que d'une valeur fixe. Les unités relatives sont particulièrement utiles pour créer des mises en page flexibles et réactives qui s'adaptent à différentes tailles d'écran et de fenêtre. Voici quelques-unes des unités relatives les plus couramment utilisées en CSS :

% (pourcentage) : Le pourcentage est une unité relative qui est souvent utilisée pour définir la taille ou la position d'un élément par rapport à la taille de son élément parent. Par exemple, width: 50% signifie que l'élément occupe 50 % de la largeur de son parent.

em : L'unité em est basée sur la taille de la police de l'élément parent. Par exemple, si la taille de police de l'élément parent est de 16 pixels, 1em équivaut à 16 pixels, 2em équivaut à 32 pixels, et ainsi de suite.

rem : L'unité rem est similaire à em, mais elle est basée sur la taille de police de l'élément racine de la page (généralement défini dans la balise <html>). Cela le rend plus prévisible que em, car il n'est pas affecté par les tailles de police de l'élément parent.

vw (viewport width) : L'unité vw est basée sur la largeur de la fenêtre du navigateur. Par exemple, 1vw équivaut à 1 % de la largeur de la fenêtre, ce qui le rend utile pour créer des mises en page réactives.

vh (viewport height) : L'unité vh est similaire à vw, mais elle est basée sur la hauteur de la fenêtre du navigateur.

vmin : L'unité vmin est basée sur la plus petite des dimensions de la fenêtre (largeur ou hauteur). Par exemple, 1vmin équivaut à 1 % de la plus petite dimension de la fenêtre.

Les unités relatives permettent de créer des mises en page flexibles qui s'ajustent automatiquement en fonction des changements de taille de police, de la taille de la fenêtre du navigateur ou de la taille de l'élément parent. Cela facilite la création de sites web adaptatifs qui fonctionnent bien sur une variété d'appareils et de résolutions d'écran.

en l'absence d'une taille de police spécifiquement définie sur un élément parent, l'unité em remontera dans la chaîne d'ascendance jusqu'à ce qu'elle trouve une valeur définie, ou elle utilisera la taille de police par défaut du navigateur comme point de référence.
